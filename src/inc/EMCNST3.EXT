C @(#)$Id$ $Source$ $Date$ 

        INCLUDE 'EMSTRG3.EXT'   !  emissions private parameters

C.........   Output formatting parameters
        INTEGER     , PARAMETER :: EMOUTLN3 = 80

        CHARACTER*2 , PARAMETER :: EMCMISS3 = '??'
        CHARACTER*5 , PARAMETER :: BLANK5   = ' '
        CHARACTER*10, PARAMETER :: BLANK10  = ' '
        CHARACTER*16, PARAMETER :: BLANK16  = ' '

C.........   Physical constants and conversion factors
        REAL, PARAMETER :: DAY2SEC = 24. * 3600.  ! Days to seconds 
        REAL, PARAMETER :: FT2M    = 0.3048       ! Feet to meters 
        REAL, PARAMETER :: FT2M3   = FT2M ** 3    ! Cubic feet to cubic meters 
        REAL, PARAMETER :: FLWE2M  = FT2M3 / 60.0 ! ft^3/min to m^3/sec
        REAL, PARAMETER :: FTOC    = 5./9.        ! Farhenheit to Celcius 
        REAL, PARAMETER :: SEC2DAY = 1. / DAY2SEC ! Days to seconds 
        REAL, PARAMETER :: TON2GM  = 907184.74    ! Tons to grams 
        REAL, PARAMETER :: GM2TON  = 1. / TON2GM  ! Grams to tons 
 
C.......   Flag values for determining temporal-profile-category
C.......   applicability:  the corresponding category of temporal
C.......   profile coefficients should be used for a source S iff
C.......   MOD( TPFLAG( S ), *TPRFAC ) = 0.
C.......   (The *TPRFAC's should all be distinct primes)

        INTEGER, PARAMETER :: WDTPFAC = 7 ! use day-of-week temp-profile w/ 
                                          !    weekday normalizer
        INTEGER, PARAMETER :: STPRFAC = 5 ! use seasonal temp-profile
        INTEGER, PARAMETER :: MTPRFAC = 3 ! use month temp-profile
        INTEGER, PARAMETER :: WTPRFAC = 2 ! use day-of-week tmp-prof w/ full 
                                          !    week normalizer
 
        CHARACTER*9, PARAMETER :: DAYS( 7 ) = 
     &         ( / 'Monday   ', 'Tuesday  ', 'Wednesday', 'Thursday ',
     &             'Friday   ', 'Saturday ', 'Sunday   '             / )

C.........  Input file format constants

        INTEGER, PARAMETER  :: LSTFMT = 0
        INTEGER, PARAMETER  :: EMSFMT = 1
        INTEGER, PARAMETER  :: EPSFMT = 2
        INTEGER, PARAMETER  :: NETFMT = 3
        INTEGER, PARAMETER  :: IDAFMT = 4

        CHARACTER*6, PARAMETER :: FMTNAMES( 0:4 ) = 
     &                        ( / 'list  ', 'EMS-95', 'EPS   ', 
     &                            'NET   ', 'IDA   '            / )

c note: these can be dynamic now b/c have a reader (rdstcy) and module (modstcy)
C.........  Country codes and names
        INTEGER     , PARAMETER :: MXCNTRY3 = 3
        INTEGER     , PARAMETER :: CNTRYCD3( MXCNTRY3 ) =
     &                                     ( / 0, 1, 2 / )
        CHARACTER*6 , PARAMETER :: CNTRYNM3( MXCNTRY3 ) = 
     &                         ( / 'US    ', 'CANADA', 'MEXICO' / )

C.........  Separator for speciation "variables" (stored in description field)
        CHARACTER*1, PARAMETER :: SPJOIN = '~'

C.........  Packet names
        CHARACTER*12, PARAMETER :: PDEFPCKT = '/POINT DEFN/'

C.........  Environment variables
        CHARACTER*16, PARAMETER :: WARNSET = 'SMK_MAXWARNING  '
        CHARACTER*16, PARAMETER :: ERRSET  = 'SMK_MAXERROR    '

C.........  Time zones
        INTEGER    , PARAMETER :: MXTZONE = 11
        INTEGER    , PARAMETER :: TZONNUM( MXTZONE ) = 
     &                        ( / 0, 3, 4, 4, 5, 5, 6, 6, 7, 7, 8 / )

        CHARACTER*3, PARAMETER :: TZONNAM( MXTZONE ) =
     &                        ( / 'GMT', 'ADT', 'AST', 'EDT', 'EST',
     &                            'CDT', 'CST', 'MDT', 'MST', 'PDT',
     &                            'PST' / )

C.........  Variable dimensioning components, independent

        INTEGER       CPRTLEN3       ! length of ctl eff, rul eff, rul pen roots
        INTEGER       IODLEN3        ! length of I/O API variable descriptions
        INTEGER       IOULEN3        ! length of I/O API units
        INTEGER       MXINVARR       ! maximum of NARVAR3, NMBVAR3, & NPTVAR3
        INTEGER       NARPPOL3       ! no. of pollutant-spec area inven vars
        INTEGER       NARVAR3        ! no. of pollutant-indep ar i/o api vars
        INTEGER       NMBVAR3        ! no. of pollutant-indep mb i/o api vars
        INTEGER       NMBPPOL3       ! no. of pol/VMT-spec mobile inven vars
        INTEGER       NPTPPOL3       ! no. of pollutant-spec point inven vars
        INTEGER       NPTVAR3        ! no. of pollutant-indep pt i/o spi vars

        PARAMETER   ( CPRTLEN3 = 3
     &              , IODLEN3  = 80
     &              , IOULEN3  = 16
     &              , MXINVARR = 12
     &              , NARPPOL3 = 6
     &              , NARVAR3  = 4
     &              , NMBVAR3  = 11
     &              , NMBPPOL3 = 1   
     &              , NPTPPOL3 = 7
     &              , NPTVAR3  = 12
     &              )

C.........  Blanks definitions
        CHARACTER(LEN=BLRLEN3), PARAMETER:: BLRBLNK3 = ' '
        CHARACTER(LEN=CHRLEN3), PARAMETER:: CHRBLNK3 = ' '
        CHARACTER(LEN=DSCLEN3), PARAMETER:: DSCBLNK3 = ' '
        CHARACTER(LEN=FIPLEN3), PARAMETER:: FIPBLNK3 = ' '
        CHARACTER(LEN=IOVLEN3), PARAMETER:: IOVBLNK3 = ' '
        CHARACTER(LEN=PLTLEN3), PARAMETER:: PLTBLNK3 = ' '
        CHARACTER(LEN=POLLEN3), PARAMETER:: POLBLNK3 = ' '
        CHARACTER(LEN=RWTLEN3), PARAMETER:: RWTBLNK3 = ' '

C.........  Multi-purpose inventory variable name parameters
        CHARACTER(LEN=CPRTLEN3), PARAMETER:: CTLEFFRT = 'CE_'  
        CHARACTER(LEN=CPRTLEN3), PARAMETER:: RULEFFRT = 'RE_' 
        CHARACTER(LEN=CPRTLEN3), PARAMETER:: RULPENRT = 'RP_'
        CHARACTER(LEN=CPRTLEN3), PARAMETER:: OZNSEART = 'OS_'
        CHARACTER(LEN=CPRTLEN3), PARAMETER:: EMISFCRT = 'EF_'
        CHARACTER(LEN=CPRTLEN3), PARAMETER:: CECOD1RT = 'C1_'
        CHARACTER(LEN=CPRTLEN3), PARAMETER:: CECOD2RT = 'C2_'


