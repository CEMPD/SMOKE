C @(#)$Id$ $Source$ $Date$ 

        INCLUDE 'EMSTRG3.EXT'   !  emissions private parameters

C.........   Output formatting parameters
        INTEGER     , PARAMETER :: EMOUTLN3 = 80

        CHARACTER(2),  PARAMETER :: EMCMISS3 = '??'
        CHARACTER(5),  PARAMETER :: BLANK5   = ' '
        CHARACTER(10), PARAMETER :: BLANK10  = ' '
        CHARACTER(16), PARAMETER :: BLANK16  = ' '

C.........   Physical constants and conversion factors
        REAL, PARAMETER :: DAY2SEC = 24. * 3600.  ! Days to seconds 
        REAL, PARAMETER :: HR2SEC  = 1. / 3600.   ! x/hour to x/second
        REAL, PARAMETER :: FT2M    = 0.3048       ! Feet to meters 
        REAL, PARAMETER :: FT2M3   = FT2M ** 3    ! Cubic feet to cubic meters 
        REAL, PARAMETER :: FLWE2M  = FT2M3 / 60.0 ! ft^3/min to m^3/sec
        REAL, PARAMETER :: FTOC    = 5./9.        ! Fahrenheit to Celcius 
        REAL, PARAMETER :: CTOF    = 9./5.        ! Celcius to Fahrenheit
        REAL, PARAMETER :: SEC2DAY = 1. / DAY2SEC ! Days to seconds 
        REAL, PARAMETER :: TON2GM  = 907184.74    ! Tons to grams 
        REAL, PARAMETER :: GM2TON  = 1. / TON2GM  ! Grams to tons
        REAL, PARAMETER :: LB2TON  = 1. / 2000.   ! Pounds to short tons
        REAL, PARAMETER :: PA2INHG = 1. / 3386.39 ! Pascals to inches of Hg

C.........  Source-category flags 
        INTEGER,      PARAMETER :: NCAT = 3          ! number src categories
        CHARACTER(6), PARAMETER :: CATLIST( NCAT ) = ! src categories
     &                         ( / 'AREA  ', 'MOBILE', 'POINT ' / )

        CHARACTER(2), PARAMETER :: GNAMLIST( NCAT ) = ! gridded inven input names
     &                         ( / 'AG', 'MG', 'PG' / )

        CHARACTER(5), PARAMETER :: ANAMLIST( NCAT ) = ! ave data input names
     &                         ( / 'ARINV' , 'MBINV' , 'PTINV'  / )

        CHARACTER(5), PARAMETER :: DNAMLIST( NCAT ) = ! daily data input names
     &                         ( / 'ARDAY' , 'MBDAY' , 'PTDAY'  / )

        CHARACTER(6), PARAMETER :: HNAMLIST( NCAT ) = ! hourly data input names
     &                         ( / 'ARHOUR' , 'MBHOUR' , 'PTHOUR'  / )

C.......   Flag values for determining temporal-profile-category
C.......   applicability:  the corresponding category of temporal
C.......   profile coefficients should be used for a source S iff
C.......   MOD( TPFLAG( S ), *TPRFAC ) = 0.
C.......   (The *TPRFAC's should all be distinct primes)

        INTEGER, PARAMETER :: WDTPFAC = 7  ! use day-of-week temp-profile w/ 
                                           !    weekday normalizer
        INTEGER, PARAMETER :: STPRFAC = 5  ! use seasonal temp-profile
        INTEGER, PARAMETER :: MTPRFAC = 3  ! use month temp-profile
        INTEGER, PARAMETER :: WTPRFAC = 2  ! use day-of-week tmp-prof w/ full 
                                           !    week normalizer
 
        CHARACTER(9), PARAMETER :: MON_NAME( 12 ) = 
     &         ( / 'January  ', 'February ', 'March    ', 'April    ',
     &             'May      ', 'June     ', 'July     ', 'August   ',
     &             'September', 'October  ', 'November ', 'December '/ )

        INTEGER     , PARAMETER :: MON_DAYS( 12 ) =
     &         ( / 31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31/ )

        CHARACTER(9), PARAMETER :: DAYS( 7 ) = 
     &         ( / 'Monday   ', 'Tuesday  ', 'Wednesday', 'Thursday ',
     &             'Friday   ', 'Saturday ', 'Sunday   '             / )

C.........  Input file format constants

        INTEGER, PARAMETER  :: LSTFMT   = 0    ! List
        INTEGER, PARAMETER  :: EMSFMT   = 1    ! Emissions Modeling System
        INTEGER, PARAMETER  :: EPSFMT   = 2    ! Emissions Preprocessing System
        INTEGER, PARAMETER  :: NETFMT   = 3    ! National Emissions Trends (NET)
        INTEGER, PARAMETER  :: IDAFMT   = 4    ! Inventory Data Analyzer (IDA)
        INTEGER, PARAMETER  :: IOGFMT   = 5    ! I/O API gridded file
        INTEGER, PARAMETER  :: CEMFMT   = 6    ! CEM input file
        INTEGER, PARAMETER  :: ORLFMT   = 7    ! One record per line (ORL) format
        INTEGER, PARAMETER  :: ORLNPFMT = 8    ! ORL nonpoint format
        INTEGER, PARAMETER  :: ORLFIREFMT = 9  ! ORL FIRE format
        INTEGER, PARAMETER  :: ORLDYFRFMT = 10 ! ORL FIREEMIS format
        INTEGER, PARAMETER  :: FF10FMT    = 11 ! FF10 format
        INTEGER, PARAMETER  :: MEDSFMT    = 12 ! MEDS format
        INTEGER, PARAMETER  :: NCDFMT     = 13 ! Gridded NetCDF format

        CHARACTER(12), PARAMETER :: FMTNAMES( 0:13 ) = 
     &                        ( / 'list        ', 
     &                            'EMS-95      ', 
     &                            'EPS         ', 
     &                            'NET         ', 
     &                            'IDA         ', 
     &                            'I/O API     ',
     &                            'CEM         ', 
     &                            'ORL         ',
     &                            'ORL nonpoint',
     &                            'ORL FIRE    ',
     &                            'ORL FIREEMIS',
     &                            'FF10        ',
     &                            'MEDS        ',
     &                            'GRID        ' / )

C.........  Indicator for inventory header fields
        CHARACTER, PARAMETER :: CINVHDR = '#'

C.........  Separator for speciation "variables" (stored in description field)
        CHARACTER, PARAMETER :: SPJOIN = '~'

C.........  Separator for emission type names
        CHARACTER(2), PARAMETER :: ETJOIN = '__'

C.........  Units for speciation matrice
        CHARACTER(16), PARAMETER :: SMASUNIT = 'g/ton'
        CHARACTER(16), PARAMETER :: SMOLUNIT = 'moles/ton'

C.........  Packet names and settings
        CHARACTER(12), PARAMETER :: PDEFPCKT = '/POINT DEFN/'
        CHARACTER(4),  PARAMETER :: MASSSTR  = 'Mass'
        CHARACTER(4),  PARAMETER :: MOLESTR  = 'Mole'

C.........  Environment variables
        CHARACTER(16), PARAMETER :: WARNSET = 'SMK_MAXWARNING  '
        CHARACTER(16), PARAMETER :: ERRSET  = 'SMK_MAXERROR    '

C.........  Time zones
        INTEGER    , PARAMETER :: MXTZONE = 33
        INTEGER    , PARAMETER :: TZONNUM( MXTZONE ) =
     &                        ( /     0,     3,     4,     4,     5,
     &                                5,     6,     6,     7,     7,
     &                                8,     9,    10,    10,    11,
     &                               11,    12,    -1,    -2,    -3,
     &                               -4,    -5,    -6,    -7,    -8,
     &                               -9,   -10,   -11,   -12,   -13,
     &                              -14,     1,     2 / )

        CHARACTER(3), PARAMETER :: TZONNAM( MXTZONE ) =
     &                        ( / 'GMT', 'ART', 'AST', 'EDT', 'EST',
     &                            'CDT', 'CST', 'MDT', 'MST', 'PDT',
     &                            'PST', 'AKT', 'HST', 'CAT', 'NT ',
     &                            'SST', 'BIT', 'CET', 'EET', 'MSK',
     &                            'GST', 'PKT', 'BST', 'THA', 'HKT',
     &                            'KST', 'AET', 'ADT', 'FJT', 'NZT', 
     &                            'LNT', 'EGT', 'FNT' / )

C.........  Packet information
        INTEGER,       PARAMETER :: NPACKET = 7
        CHARACTER(20), PARAMETER :: PKTLIST( NPACKET ) = 
     &                          (  / 'CTG                 ',
     &                               'CONTROL             ',
     &                               'ALLOWABLE           ',
     &                               'ADD                 ',
     &                               'REACTIVITY          ',
     &                               'PROJECTION          ',
     &                               'MACT                '  / )

C.........  Control and projection matrix codes (in order of precedence)
        INTEGER, PARAMETER :: CTYPPROJ = 1   ! for projection matrix
        INTEGER, PARAMETER :: CTYPREAC = 2   ! for reactivity control matrix
        INTEGER, PARAMETER :: CTYPADD  = 3   ! for additive control matrix
        INTEGER, PARAMETER :: CTYPMULT = 4   ! for multiplicative control matrix

C.........  Indices when storing source information for evaluation
        INTEGER, PARAMETER :: HT_IDX = 1     ! index for stack height
        INTEGER, PARAMETER :: DM_IDX = 2     ! index for stack diameter
        INTEGER, PARAMETER :: TK_IDX = 3     ! index for stack exit tmpr
        INTEGER, PARAMETER :: VE_IDX = 4     ! index for stack exit velocity 
        INTEGER, PARAMETER :: FL_IDX = 5     ! index for stack exit flow
        INTEGER, PARAMETER :: RISE_IDX = 6   ! index for analytical plume rise
        INTEGER, PARAMETER :: SRC_IDX = 7    ! index for source ID
        INTEGER, PARAMETER :: FIP_IDX = 8    ! index for FIPS code
        INTEGER, PARAMETER :: PLT_IDX = 9    ! index for plant code

C.........  Special data input names and associated parameters
        INTEGER, PARAMETER :: CODFLAG3 = 9000 ! to ID special data types
        INTEGER, PARAMETER :: MXSPDAT  = 6    ! max number of special data
        CHARACTER(IOVLEN3), PARAMETER :: SPDATNAM( MXSPDAT ) =
     &                                    ( / 'LAY1F           ',
     &                                        'PBOT            ',
     &                                        'PTOP            ',
     &                                        'STKTK           ',
     &                                        'STKVE           ',
     &                                        'STKFL           '  / )
        CHARACTER(IOULEN3), PARAMETER :: SPDATUNT( MXSPDAT ) =
     &                                    ( / 'n/a             ',
     &                                        'm               ',
     &                                        'm               ',
     &                                        'deg K           ',
     &                                        'm/s             ',
     &                                        'm^3/s           '  / )
        CHARACTER(25), PARAMETER :: SPDATDSC( MXSPDAT ) =
     &                          ( / 'Plume fraction in layer 1',
     &                              'Plume bottom height      ',
     &                              'Plume top height         ',
     &                              'Stack exit temperature   ',
     &                              'Stack exit velocity      ',
     &                              'Stack exit flow          '  / )

C.........  Variable dimensioning components, independent

        INTEGER       CPRTLEN3       ! length of ctl eff, rul eff, rul pen roots
        INTEGER       NARPPOL3       ! no. of pollutant-spec area inven vars
        INTEGER       NARVAR3        ! no. of pollutant-indep ar i/o api vars
        INTEGER       NMBVAR3        ! no. of pollutant-indep mb i/o api vars
        INTEGER       NMBPPOL3       ! no. of pol/VMT-spec mobile inven vars
        INTEGER       NPTPPOL3       ! no. of pollutant-spec point inven vars
        INTEGER       NPTVAR3        ! no. of pollutant-indep pt i/o api vars

        PARAMETER   ( CPRTLEN3 = 3
     &              , NARPPOL3 = 6
     &              , NARVAR3  = 4 
     &              , NMBVAR3  = 9
     &              , NMBPPOL3 = 2   
     &              , NPTPPOL3 = 7
     &              , NPTVAR3  =13
     &              )

C.........  Maximum settings...
        INTEGER, PARAMETER :: MXIYEAR = 2050  ! reasonable inventory year
        INTEGER, PARAMETER :: MXINVARR = 22   ! maximum inven vars ever needed

C.........  Blanks definitions
        CHARACTER(BLRLEN3), PARAMETER:: BLRBLNK3 = ' '
        CHARACTER(CHRLEN3), PARAMETER:: CHRBLNK3 = ' '
        CHARACTER(DSCLEN3), PARAMETER:: DSCBLNK3 = ' '
        CHARACTER(FIPLEN3), PARAMETER:: FIPBLNK3 = ' '
        CHARACTER(IOVLEN3), PARAMETER:: IOVBLNK3 = ' '
        CHARACTER(ORSLEN3), PARAMETER:: ORSBLNK3 = ' '
        CHARACTER(PLTLEN3), PARAMETER:: PLTBLNK3 = ' '
        CHARACTER(POLLEN3), PARAMETER:: POLBLNK3 = ' '
        CHARACTER(RWTLEN3), PARAMETER:: RWTBLNK3 = ' '

C.........  Multi-purpose inventory variable name parameters
        CHARACTER(CPRTLEN3), PARAMETER:: CTLEFFRT = 'CE_'  
        CHARACTER(CPRTLEN3), PARAMETER:: RULEFFRT = 'RE_' 
        CHARACTER(CPRTLEN3), PARAMETER:: RULPENRT = 'RP_'
        CHARACTER(CPRTLEN3), PARAMETER:: AVEDAYRT = 'DY_'
        CHARACTER(CPRTLEN3), PARAMETER:: EMISFCRT = 'EF_'
        CHARACTER(CPRTLEN3), PARAMETER:: CECOD1RT = 'C1_'
        CHARACTER(CPRTLEN3), PARAMETER:: CECOD2RT = 'C2_'


