C ****************************************************************************
C *
C * Project Title: Sparse Matrix Operator Kernel Emissions (SMOKE) Modeling
C *                System
C * File Version: @(#)$Id$
C *
C * COPYRIGHT (C) 1996, MCNC--North Carolina Supercomputing Center
C * All Rights Reserved
C *
C * See file COPYRIGHT for conditions of use.
C *
C * Environmental Programs Group
C * MCNC--North Carolina Supercomputing Center
C * P.O. Box 12889
C * Research Triangle Park, NC  27709-2889
C *
C * env_progs@mcnc.org
C *
C * Pathname: $Source$
C * Last updated: $Date$ 
C *
C
****************************************************************************/

C....................................................................
C  INCLUDE FILE  IODECL3.EXT
C
C  CONTAINS:  declarations and usage comments for the Models-3 (M3)
C             Interprocess Communication Applications Programming
C             Interface (API)
C
C  DEPENDENT UPON:  consistency with the API itself.
C
C  RELATED FILES:  PARM3.EXT, FDESC3.EXT
C
C  REVISION HISTORY:  prototype 3/92 by CJC
C
C....................................................................

        LOGICAL         CHECK3  !  is JDATE:JTIME available for FNAME?
        LOGICAL         DESC3   !  Puts M3 file descriptions into FDESC3.EXT
        INTEGER         INIT3   !  Initializes M3 API and returns unit for log
        LOGICAL         SHUT3   !  Shuts down API
        LOGICAL         OPEN3   !  opens an M3 file
        LOGICAL         READ3   !  read M3 file for variable,layer,timestep
        LOGICAL         WRITE3  !  write timestep to M3 file
        LOGICAL         XTRACT3 !  extract window from timestep in a M3 file
        LOGICAL         INTERP3 !  do time interpolation from a M3 file
        LOGICAL         DDTVAR3 !  do time derivative from M3 file

        EXTERNAL        CHECK3 , DESC3  , INIT3  , SHUT3  , OPEN3  ,
     &          	READ3  , WRITE3 , XTRACT3, INTERP3, DDTVAR3

C.......................................................................
C..................  API FUNCTION USAGE AND EXAMPLES  ..................
C.......
C.......   In the examples below, names (FILENAME, PROGNAME, VARNAME)
C.......   should be CHARACTER*16, STATUS and RDFLAG are LOGICAL, dates
C.......   are INTEGER, coding the Julian date as YYYYDDD, times are
C.......   INTEGER, coding the time as HHMMSS, and LOGDEV is the FORTRAN
C.......   INTEGER unit number for the program's log file; and layer,
C.......   row, and column specifications use INTEGER FORTRAN array
C.......   index conventions (in particular, they are based at 1, not
C.......   based at 0, as in C).
C.......   Parameter values for "ALL...", for grid and file type IDs,
C.......   and for API dimensioning values are given in PARMS3.EXT;
C.......   file descriptions are passed via commons BDESC3 and CDESC3
C.......   in file FDESC3.EXT.
C.......
C.......   CHECK3():  check whether timestep JDATE:JTIME is available 
C.......   for variable VNAME in file FILENAME.
C.......   FORTRAN usage is:
C.......
C.......       STATUS = CHECK3 ( FILENAME, VNAME, JDATE, JTIME )
C.......       IF ( .NOT. STATUS ) THEN
C.......           ... (data-record not available in file FNAME)
C.......       END IF
C.......
C.......   DESC3():   return description of file FILENAME to the user
C.......   in commons BDESC3 and CDESC3, file FDESC3.EXT.
C.......   FORTRAN usage is:
C.......
C.......       STATUS = DESC3 ( FILENAME )
C.......       IF ( .NOT. STATUS ) THEN
C.......           ... (file not yet opened)
C.......       END IF
C.......       ...
C.......       (Now common FDESC3 (file FDESC3.EXT) contains the descriptive
C.......       information for this file.)
C.......
C.......   INIT3():  set up the M3 API, open the program's log file, and
C.......   return the unit FORTRAN number for log file.  May be called
C.......   multiple times (in which case, it always returns the log-file's
C.......   unit number).  Note that block data INITBLK3.FOR must also be
C.......   linked in.
C.......   FORTRAN usage is:
C.......
C.......       LOGDEV = INIT3 ( )
C.......       IF ( LOGDEV .LT. 0 ) THEN
C.......           ... (can't proceed:  probably can't open the log.
C.......                Stop the program)
C.......       END IF
C.......
C.......   OPEN3():  open file FILENAME from program PROGNAME, with
C.......   requested read-write/old-new status.  For files opened for WRITE,
C.......   record program-name and other history info in their headers.
C.......   May be called multiple times for the same file (in which case,
C.......   it returns true unless the request is for READ-WRITE status
C.......   for a file already opened READ-ONLY).  Legal statuses are:
C.......   FSREAD3: "old read-only"
C.......   FSRDWR3: "old read-write"
C.......   FSNEW3:  "new (read-write)"
C.......   FSUNKN3: "unknown (read_write)"
C.......   FORTRAN usage is:
C.......
C.......       STATUS = OPEN3 ( FILENAME, FSTATUS, PROGNAME )
C.......       IF ( .NOT. STATUS ) THEN
C.......           ... (process the error)
C.......       END IF
C.......
C.......   READ3():  read data from FILENAME for timestep JDATE:JTIME,
C.......   variable VNAME, layer LAY, into location  ARRAY.
C.......   If VNAME==ALLVARS3=='ALL         ', reads all variables;
C.......   if LAY==ALLAYS3==-1, reads all layers.
C.......   Offers random access to the data by filename, date&time, variable,
C.......   and layer.  For DICTIONARY files, logical name for file being
C.......   requested maps into the VNAME argument.  For time-independent
C.......   files (including DICTIONARY files), JDATE and JTIME are ignored.
C.......   FORTRAN usage is:
C.......
C.......       STATUS = READ3 ( FILENAME, VNAME, LAY, JDATE, JTIME, ARRAY )
C.......       IF ( .NOT. STATUS ) THEN
C.......           ... (read failed -- process this error.)
C.......       END IF
C.......
C.......   SHUT3():  Flushes and closes down all M3 files currently open.
C.......   Must be called before program termination; if it returns FALSE
C.......   the run must be considered suspect.
C.......   FORTRAN usage is:
C.......
C.......       STATUS = SHUT3 ( )
C.......       IF ( .NOT. STATUS ) THEN
C.......           ... (Flush of files to disk probably didn't work;
C.......                look at netCDF error messages)
C.......       END IF
C.......
C.......   WRITE3():  write data from ARRAY to file FILENAME for timestep
C.......   JDATE:JTIME.  For GRIDDED, BUONDARY, and CUSTOM files, VNAME
C.......   must be a variable found in the file, or else ALLVARS3=='ALL'
C.......   to write all variables from ARRAY.  For other file types,
C.......   VNAME _must_ be ALLVARS3.
C.......   FORTRAN usage is:
C.......
C.......       STATUS = WRITE3 ( FILENAME, VNAME, JDATE, JTIME, ARRAY )
C.......       IF ( .NOT. STATUS ) THEN
C.......           ... (write failed -- process this error.)
C.......       END IF
C.......
C.......   XTRACT3():  read/extract gridded data into location  ARRAY
C.......   from FILENAME for time step JDATE:JTIME, variable VNAME
C.......   and the data window defined by
C.......       LOLAY  <=  layer   <=  HILAY,
C.......       LOROW  <=  row     <=  HIROW,
C.......       LOCOL  <=  column  <=  HICOL
C.......   FORTRAN usage is:
C.......
C.......       STATUS = XTRACT3 ( FILENAME, VNAME,
C.......   &                      LOLAY, HILAY,
C.......   &                      LOROW, HIROW,
C.......   &                      LOCOL, HICOL,
C.......   &                      JDATE, JTIME, ARRAY )
C.......       IF ( .NOT. STATUS ) THEN
C.......           ... (extract failed -- process this error.)
C.......       END IF
C.......
C.......   INTERP3():  read/interpolate gridded, boundary, or custom data 
C.......   into location  ARRAY from FILENAME for time JDATE:JTIME, variable 
C.......   VNAME, and all layers.  Note use of ASIZE = transaction size =
C.......   size of ARRAY, for error-checking.
C.......   FORTRAN usage is:
C.......
C.......       STATUS = INTERP3 ( FILENAME, VNAME, JDATE, JTIME,
C.......   &                      ASIZE, ARRAY )
C.......       IF ( .NOT. STATUS ) THEN
C.......           ... (interpolate failed -- process this error.)
C.......       END IF
C.......
C.......   DDTVAR3():  read and calculate mean time derivative (per second) 
C.......   for gridded, boundary, or custom data.  Put result into location  
C.......   ARRAY from FILENAME for time JDATE:JTIME, variable VNAME, and all 
C.......   layers.  Note use of ASIZE = transaction size = size of ARRAY, 
C.......   for error-checking.  Note  d/dt( time-independent )==0.0
C.......   FORTRAN usage is:
C.......
C.......       STATUS = DDTVAR3 ( FILENAME, VNAME, JDATE, JTIME,
C.......   &                      ASIZE, ARRAY )
C.......       IF ( .NOT. STATUS ) THEN
C.......           ... (operation failed -- process this error.)
C.......       END IF
C.......
C................   end   IODECL3.EXT   ....................................

