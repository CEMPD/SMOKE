#!/bin/csh -fx

# Version @(#)qa_run.scr	1.2
# Path    /home/ncsc/mhouyoux/smokev1/scripts/run/SCCS/s.qa_run.scr
# Date    10/12/00 16:58:38

# This script runs the SMOKE QA processors.  
#
# Script created by : M. Houyoux, North Carolina 
#                     Supercomputing Center
# Last edited : September, 2000
#
#*********************************************************************

# Create directory for output program logs

setenv OUTLOG $LOGS
if ( ! -e $OUTLOG ) then
   mkdir -p $OUTLOG
   chmod ug+w $OUTLOG
endif

# Initialize exit status
set exitstat = 0

# Ensure that SMK_SOURCE is defined
if ( $?SMK_SOURCE ) then

   # Set up input environment variables, with the help of the Assigns file
   if ( $SMK_SOURCE == 'A' || $SMK_SOURCE == 'M' || $SMK_SOURCE == 'P' ) then

      # Save existing values of run settings
      if ( $?RUN_SMKINVEN ) then
	 set run_smkinven = $RUN_SMKINVEN
      endif

      if ( $?RUN_GRDMAT ) then
	 set run_grdmat = $RUN_GRDMAT
      endif

      if ( $?RUN_SPCMAT ) then
	 set run_spcmat = $RUN_SPCMAT
      endif

      if ( $?RUN_TEMPORAL ) then
	 set run_temporal = $RUN_TEMPORAL
      endif

      if ( $?RUN_LAYPOINT ) then
	 set run_laypoint = $RUN_LAYPOINT
      endif

      # Temporarily set run settings to get input file names for Smkreport
      setenv RUN_SMKINVEN Y
      setenv RUN_GRDMAT   Y
      setenv RUN_SPCMAT   Y
      setenv RUN_TEMPORAL Y

      if ( $SMK_SOURCE == 'P' ) then
	 setenv RUN_LAYPOINT Y
      endif

      # Invoke the Assigns file, if it is defined
      if ( $?ASSIGNS_FILE ) then
	 source $ASSIGNS_FILE

      else
	 echo 'SCRIPT ERROR: Environment variable ASSIGNS_FILE is not set,'
	 echo '              but it is needed to use the qa_run.scr script!'
	 set exitstat = 1

      endif

      # If previous values of were set, restore E.V. settings
      if ( $?run_smkinven ) then
	 setenv RUN_SMKINVEN $run_smkinven
      endif

      if ( $?run_grdmat ) then
	 setenv RUN_GRDMAT $run_grdmat
      endif

      if ( $?run_spcmat ) then
	 setenv RUN_SPCMAT $run_spcmat
      endif

      if ( $?run_temporal ) then
	 setenv RUN_TEMPORAL $run_temporal
      endif

      if ( $?run_laypoint ) then
	 setenv RUN_LAYPOINT $run_laypoint
      endif

   # Set up for biogenics...   
   else

      # Nothing for now

   endif

# SMK_SOURCE is not defined   
else
   echo 'SCRIPT ERROR: Environment variable SMK_SOURCE is not set,'
   echo '              but it is needed to use the qa_run.scr script!'
   set exitstat = 1

endif

# Check if QA_TYPE variable is set
if ( ! $?QA_TYPE ) then

   echo 'SCRIPT ERROR: Environment variable QA_TYPE is not set,'
   echo '              but it is needed to use the qa_run.scr script!'
   echo '              Valid values are "inventory" or "monthly".'
   set exitstat = 1
   
endif

# Abort if already had an error
if ( $exitstat == 1 ) then
   exit( $exitstat )
endif

# Set up input file for Smkreport depending on settings

switch ( $QA_TYPE ) 

case inventory:

   switch ( $SMK_SOURCE )
   case A:
      setenv REPCONFIG $SCRIPTS/configure/REPCONFIG.ar.inv.txt
      setenv REPORT1 $REPSTAT/a.state.$INVOP.rpt
      setenv REPORT2 $REPSTAT/a.county.$INVOP.rpt
      setenv REPORT3 $REPSTAT/a.scc.$INVOP.rpt
      setenv REPORT4 $REPSTAT/a.state_scc.$INVOP.rpt
      setenv REPORT5 $REPSTAT/ag.state.$GRID.$INVOP.rpt
      setenv REPORT6 $REPSTAT/ag.scc.$GRID.$INVOP.rpt
      breaksw
      
   case M:
      setenv REPCONFIG $SCRIPTS/configure/REPCONFIG.mb.inv.txt
      setenv REPORT1 $REPSTAT/m.state.$INVOP.rpt
      setenv REPORT2 $REPSTAT/m.county.$INVOP.rpt
      setenv REPORT3 $REPSTAT/m.scc.$INVOP.rpt
      setenv REPORT4 $REPSTAT/m.state_scc.$INVOP.rpt
      setenv REPORT5 $REPSTAT/m.state_rclas.$INVOP.rpt
      setenv REPORT6 $REPSTAT/mg.state.$GRID.$INVOP.rpt
      setenv REPORT7 $REPSTAT/mg.scc.$GRID.$INVOP.rpt
      breaksw
      
   case P:
      setenv REPCONFIG $SCRIPTS/configure/REPCONFIG.pt.inv.txt
      setenv REPORT1 $REPSTAT/p.state.$INVOP.rpt
      setenv REPORT2 $REPSTAT/p.county.$INVOP.rpt
      setenv REPORT3 $REPSTAT/p.scc.$INVOP.rpt
      setenv REPORT4 $REPSTAT/p.state_scc.$INVOP.rpt
      setenv REPORT5 $REPSTAT/pg.state.$GRID.$INVOP.rpt
      setenv REPORT6 $REPSTAT/pg.scc.$GRID.$INVOP.rpt
      breaksw
      
   endsw
   
   set logabbr = inv.$INVOP
   
   breaksw
   
case monthly:

   switch ( $SMK_SOURCE )
   case A:
      setenv REPCONFIG $SCRIPTS/configure/REPCONFIG.ar.monthly.txt
      setenv REPORT1  $REPSCEN/at.state.$ESCEN.rpt
      setenv REPORT2  $REPSCEN/at.county.$ESCEN.rpt
      setenv REPORT3  $REPSCEN/at.scc.$ESCEN.rpt
      setenv REPORT4  $REPSCEN/at.state_scc.$ESCEN.rpt
      setenv REPORT5  $REPSCEN/at.hour_scc.$ESCEN.rpt
      setenv REPORT6  $REPSCEN/agt.state.$GRID.$ESCEN.rpt
      setenv REPORT7  $REPSCEN/agt.county.$GRID.$ESCEN.rpt
      setenv REPORT8  $REPSCEN/agt.scc.$GRID.$ESCEN.rpt
      setenv REPORT9  $REPSCEN/ats.state.$ESCEN.rpt
      setenv REPORT10 $REPSCEN/ats.scc.$ESCEN.rpt
      setenv REPORT11 $REPSCEN/ats.state_scc.$ESCEN.rpt
      breaksw
      
   case M:
      setenv REPCONFIG $SCRIPTS/configure/REPCONFIG.mb.monthly.txt
      setenv REPORT1  $REPSCEN/mt.state.$ESCEN.rpt
      setenv REPORT2  $REPSCEN/mt.county.$ESCEN.rpt
      setenv REPORT3  $REPSCEN/mt.scc.$ESCEN.rpt
      setenv REPORT4  $REPSCEN/mt.state_scc.$ESCEN.rpt
      setenv REPORT5  $REPSCEN/mt.hour_scc.$ESCEN.rpt
      setenv REPORT6  $REPSCEN/mt.state_rclas.$ESCEN.rpt
      setenv REPORT7  $REPSCEN/mt.county_rclas.$ESCEN.rpt
      setenv REPORT8  $REPSCEN/mgt.state.$GRID.$ESCEN.rpt
      setenv REPORT9  $REPSCEN/mgt.county.$GRID.$ESCEN.rpt
      setenv REPORT10 $REPSCEN/mgt.scc.$GRID.$ESCEN.rpt
      setenv REPORT11 $REPSCEN/mgt.state_rclas.$GRID.$ESCEN.rpt
      setenv REPORT12 $REPSCEN/mgt.county_rclas.$GRID.$ESCEN.rpt
      setenv REPORT13 $REPSCEN/mts.state.$ESCEN.rpt
      setenv REPORT14 $REPSCEN/mts.scc.$ESCEN.rpt
      setenv REPORT15 $REPSCEN/mts.state_scc.$ESCEN.rpt
      breaksw
      
   case P:
      setenv REPCONFIG $SCRIPTS/configure/REPCONFIG.pt.monthly.txt
      setenv REPORT1  $REPSCEN/pt.state.$ESCEN.rpt
      setenv REPORT2  $REPSCEN/pt.county.$ESCEN.rpt
      setenv REPORT3  $REPSCEN/pt.scc.$ESCEN.rpt
      setenv REPORT4  $REPSCEN/pt.state_scc.$ESCEN.rpt
      setenv REPORT5  $REPSCEN/pt.hour_scc.$ESCEN.rpt
      setenv REPORT6  $REPSCEN/pt.source.$ESCEN.rpt
      setenv REPORT7  $REPSCEN/pgt.state.$GRID.$ESCEN.rpt
      setenv REPORT8  $REPSCEN/pgt.county.$GRID.$ESCEN.rpt
      setenv REPORT9  $REPSCEN/pgt.scc.$GRID.$ESCEN.rpt
      setenv REPORT10 $REPSCEN/pgt.source.$GRID.$ESCEN.rpt
      setenv REPORT11 $REPSCEN/pts.state.$ESCEN.rpt
      setenv REPORT12 $REPSCEN/pts.scc.$ESCEN.rpt
      setenv REPORT13 $REPSCEN/pts.state_scc.$ESCEN.rpt
      breaksw
      
   endsw
   
   set logabbr = $ESDATE.$ESCEN
   
   breaksw

case state

   switch ( $SMK_SOURCE )
   case A:
      setenv REPCONFIG $SCRIPTS/configure/REPCONFIG.ar.state.txt
      setenv REPORT1 $REPSTAT/a.state.$INVOP.rpt
      setenv REPORT2 $REPSTAT/ag.state.$INVOP.rpt
      setenv REPORT3 $REPSTAT/as.state.$INVOP.rpt
      setenv REPORT4 $REPSCEN/at.state.$ESCEN.rpt
      breaksw
      
   case M:
      setenv REPCONFIG $SCRIPTS/configure/REPCONFIG.mb.state.txt
      setenv REPORT1 $REPSTAT/m.state.$INVOP.rpt
      setenv REPORT2 $REPSTAT/mg.state.$INVOP.rpt
      setenv REPORT3 $REPSTAT/ms.state.$INVOP.rpt
      setenv REPORT4 $REPSCEN/mt.state.$ESCEN.rpt
      breaksw
      
   case P:
      setenv REPCONFIG $SCRIPTS/configure/REPCONFIG.pt.state.txt
      setenv REPORT1 $REPSTAT/p.state.$INVOP.rpt
      setenv REPORT2 $REPSTAT/pg.state.$INVOP.rpt
      setenv REPORT3 $REPSTAT/ps.state.$INVOP.rpt
      setenv REPORT4 $REPSCEN/pt.state.$ESCEN.rpt
      breaksw
      
   endsw
   
   set logabbr = st.$INVOP
   
   breaksw
   
default
   echo 'SCRIPT ERROR: Environment variable QA_TYPE is set to'
   echo '              an unknown setting.  Valid values are'
   echo '              "state", "inventory", or "monthly".'
   set exitstat = 1
   breaksw
      
endsw

 # Abort if already had an error
if ( $exitstat == 1 ) then
   exit( $exitstat )
endif
  
#
### Smkreport processing for area, mobile, or point sources
#
setenv TMPLOG   $OUTLOG/smkreport.$SRCABBR.$logabbr.log
if ( $?RUN_SMKREPORT ) then
   if ( $RUN_SMKREPORT == 'Y' && -e $SMK_BIN/smkreport ) then

      if ( -e $TMPLOG ) then
	 source $SCRIPTS/run/movelog.scr
      endif

      if ( $exitstat == 0 ) then         # Run program
         setenv LOGFILE $TMPLOG
         time $SMK_BIN/smkreport 
#        dbx $QA_SRC/smkreport.debug
      endif

   else 
      if ( $RUN_SMKREPORT == 'Y' ) then
	 echo 'SCRIPT ERROR: SMKREPORT program does not exist in:'
	 echo '              '$SMK_BIN
	 set exitstat = 1
      endif
   endif
endif

#
### Merging
#
#setenv TMPLOG   $OUTLOG/smkmerge.$SRCABBR.$INVEN.$ESDATE.$GRID.log
#if ( $?RUN_SMKMERGE ) then
#   if ( $RUN_SMKMERGE == 'Y' && -e $SMK_BIN/smkmerge ) then

      # Set mole/mass-based speciation matrices.  Default, mole.
#      if ( $?ASMAT_L ) then
#         setenv ASMAT $ASMAT_L
#      endif
#      if ( $?BGTS_L ) then
#         setenv BGTS $BGTS_L
#      endif
#      if ( $?MSMAT_L ) then
#         setenv MSMAT $MSMAT_L
#      endif
#      if ( $?PSMAT_L ) then
#         setenv PSMAT $PSMAT_L
#      endif
#      if ( $?SPC_INPUT ) then
#         if ( $SPC_INPUT == 'mass' ) then
#            if ( $?ASMAT_S ) then
#               setenv ASMAT $ASMAT_S
#            endif
#            if ( $?BGTS_S ) then
#               setenv BGTS $BGTS_S
#            endif
#            if ( $?MSMAT_S ) then
#               setenv MSMAT $MSMAT_S
#            endif
#            if ( $?PSMAT_S ) then
#               setenv PSMAT $PSMAT_S
#            endif
#         endif
#      endif

#      if ( -e $TMPLOG ) then
#         source $SCRIPTS/run/movelog.scr
#      endif

#      if ( $exitstat == 0 ) then         # Run program
#         setenv LOGFILE $TMPLOG
#         time $SMK_BIN/smkmerge
#      endif

#   else
#      if ( $RUN_SMKMERGE == 'Y' ) then
#         echo 'SCRIPT ERROR: SMKMERGE program does not exist in:'
#         echo '              '$SMK_BIN
#         set exitstat = 1
#      endif
#   endif
#endif

#
## Ending of script with exit status
#
exit( $exitstat )

